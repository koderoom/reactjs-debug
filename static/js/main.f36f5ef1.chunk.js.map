{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","todoList","push","data","ts","Date","state","title","newTodo","handleChange","bind","assertThisInitialized","addNewTodo","removeTodo","event","setState","target","value","console","log","length","splice","index","_this2","itemList","map","item","react_default","a","createElement","className","key","style","fontSize","moment","format","index_es","onClick","icon","faTrashAlt","size","color","opacity","cursor","Fragment","faReact","fontWeight","href","onChange","type","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f36f5ef1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport {faReact} from '@fortawesome/free-brands-svg-icons';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    let title = \"React JS Debugging\";\n\n    let todoList = [];\n    todoList.push({'data':'Learn React JS debugging in VSCode Editor', 'ts' : new Date()});\n    todoList.push({'data':'Learn React JS debugging in Chrome Dev Tools', 'ts' : new Date()});\n    todoList.push({'data':'Learn React Native debugging in VSCode Editor', 'ts' : new Date()});\n    todoList.push({'data':'Learn React Native debugging in Chrome Dev Tools', 'ts' : new Date()});\n\n    this.state = {'title':title, 'todoList' : todoList, 'newTodo':''};\n    \n    // Event binding\n    this.handleChange = this.handleChange.bind(this);\n    this.addNewTodo = this.addNewTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({'newTodo': event.target.value});\n  }\n\n  /**\n   * ADD NEW TODO TASK\n   */\n  addNewTodo() {\n    console.log('Add', new Date());\n\n    if(this.state.newTodo.length > 0) {\n      let newTodo = {'data' : this.state.newTodo, 'ts': new Date()};\n      this.state.todoList.splice(0, 0, newTodo);\n\n      this.setState({'newTodo': '', 'todoList' : this.state.todoList});\n    }\n  }\n\n  /**\n   * Remove a task.\n   * @param {*} index \n   */\n  removeTodo(index) {\n    console.log('Remove', index, new Date());\n\n    this.state.todoList.splice(index, 1);\n    this.setState({'todoList' : this.state.todoList});\n  }\n\n\n  /**\n   * UI RENDERING COMPONENT\n   */\n  render() {\n    const itemList = this.state.todoList.map((item, index)=>\n      <li className=\"list-group-item\" key={index}>\n        <div className=\"d-flex justify-content-between\">\n            <div className=\"d-flex flex-column\">\n              <span className='text-capitalize'>{item.data}</span>\n              <span style={{fontSize:'x-small'}}>{moment(item.ts).format('YYYY-MM-DD HH:mm:ss')}</span>\n            </div>\n            <FontAwesomeIcon onClick={()=>{this.removeTodo(index)}} icon={faTrashAlt} size=\"lg\" color='red' style={{opacity:'.7', cursor:'pointer'}}/>\n        </div>\n      </li>\n    );\n\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <div>\n            <FontAwesomeIcon icon={faReact} size=\"lg\" color=\"white\" className=\"slow-spin\" />\n            <a className=\"ml-1 navbar-brand\" style={{fontWeight:'bold'}} href=\"#\">{this.state.title}</a>\n          </div>\n        </nav>\n\n        <div className=\"container-fluid\">\n            <div className=\"row justify-content-center mt-1\">\n                <div className=\"col-6 rounded\">\n                    <div className=\"card\">\n                      <div className=\"card-body bg-secondary d-flex justify-content-center align-items-center\">\n                          <input value={this.state.newTodo} onChange={this.handleChange} className=\"form-control form-control-lg col-9 mr-1\" type=\"text\" placeholder=\"Add New Todo\" />\n                          <button type=\"button\" className=\"btn btn-lg btn-secondary\" onClick={this.addNewTodo}>Add Todo</button>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"container-fluid\">\n            <div className=\"row justify-content-center mt-1\">\n              <div className=\"col-6\">\n                <div className=\"card\">\n                  <div className=\"card-header bg-secondary h4 text-light\">Todo List</div>\n                  <ul className=\"list-group list-group-flush\">\n                    {itemList}\n                  </ul>\n                </div>\n              </div>\n            </div>\n        </div>\n\n        <nav className=\"navbar navbar-dark bg-dark justify-content-center text-light fixed-bottom\">\n            Made with Love <span className=\"ml-1\"> &hearts;</span>\n        </nav>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}